<h1>W1</h1>
<p>[2001:288:6004:17::53]:3128</p>
<p>140.130.17.50:3128</p>
<p>tcp/ip==transmision control protocol/internet protocol</p>
<p>port </p>
<p>date 資料</p>
<p>transmit 傳輸</p>
<p>control 控制</p>
<p>version=edition 版本</p>
<p>super computer 超級電腦</p>
<p>batch computation 批次運算</p>
<p>mainframe 伺服器主機</p>
<p>server 伺服器</p>
<p>cluster 叢集</p>
<p>personal computer</p>
<p>microcontroler</p>
<p>mobile phone</p>
<p>IPv4 version4 IP4個區段用.區隔</p>
<p>IPv6 version4 IP6個區段用:區隔</p>
<p>140.130.17.254(系gateway通道)</p>
<p>140.130.1.*(學校主幹)</p>
<p>NAT network address translation</p>
<p>internal network(內部網路)192.168.*</p>
<p>ip address mapping 對應</p>
<h1>W6</h1>
<p>portable obs</p>
<p>google hangout meet</p>
<p>streeming and recording</p>
<h1>W7</h1>
<h6>grouping and meet</h6>
<h1>W8</h1>
<p>組別:第四組</p>
<p>組長:50833102</p>
<h1>W9</h1>
<h2><span>電腦軟硬體簡介</span></h2>
<div class="_4u-c _1wfr _9hq">
<div class="_5f0v uiScrollableArea fade contentBefore" height="100%" tabindex="0">
<div class="uiScrollableAreaWrap scrollable" id="js_2m">
<div class="uiScrollableAreaBody">
<div class="uiScrollableAreaContent">
<div aria-label="訊息" class="__i_ _7i2k" role="region">
<h3><span class="_3oh- _58nk">機殼</span></h3>
<h6 class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk">容納和保護主機營體的主機殼</span></h6>
<p><span class="_3oh- _58nk"></span></p>
<h3><span class="_3oh- _58nk">中央處理器(CPU)</span></h3>
<h6 class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk">又稱為電腦的心臟，而CPU主要工作是算術、運輯運算，解讀電腦內的每個指令來控制運作。</span></h6>
<h3><span class="_3oh- _58nk"> 電源(Power)</span></h3>
<div class="_aok _7i2m" tabindex="0">
<h6><span class="_3oh- _58nk">是提供內接式元件電力來源的組件，他將市電轉換為直流電供給其他元件使用。</span></h6>
<p><span class="_3oh- _58nk"></span></p>
</div>
<h3 class="_aok _7i2m" tabindex="0">主機板</h3>
<div class="_aok _7i2m" tabindex="0">
<h6><span class="_3oh- _58nk">主機板的功能主要在承戴其插卡，所有電腦裡的東西都會接到主機板 ，它們之間要相互的傳資料也是經過主機板，之後再傳到對方，簡單的來說，它就像一個轉運站一樣。 </span></h6>
</div>
<h3>顯示卡(VGA )</h3>
<h6></h6>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk">顯示卡在電腦中主要作用就是把電腦計算出來的文字與圖形表現在顯示器上。</span></div>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk"></span></div>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk"></span></div>
<h3 class="_41ud">音效卡</h3>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk">可說是現在多媒體電腦的必備元件之一，負責電腦音訊的處理。</span></div>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk"></span></div>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk"></span></div>
<h3 class="_41ud">記憶體(RAM)</h3>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk">記憶體的主要功用是暫存資料，當它被使用時，系統可以從RAM上存取資料。</span></div>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk"></span></div>
<div class="_aok _7i2m" tabindex="0"><span class="_3oh- _58nk"></span></div>
<h3 class="_41ud">硬碟</h3>
<h6 class="_41ud">硬碟就是電腦中負責儲存資料的工具，電腦中的大小資料均可以在此找到。</h6>
<h6 class="_41ud"></h6>
<h2 class="clearfix _17pz"><span>網路架構與設定簡介</span></h2>
<p><span></span></p>
<p><span>網路架構模型分為4層，也就是經常聽到的DoD（Department of Defense）或是TCP/IP模型，如附圖所示，最上層為應用層（Application  Layer），接下來依據為傳輸層（Transport Layer）、網路層（Internet Layer）、鏈結層（Link Layer）。這4層分</span>工需要相互合作，卻又彼此獨立。</p>
<h3>應用層（Application Layer）</h3>
<p>網路模型的最上層，也是想要利用網路傳輸資料的程式，能夠直接碰觸到的層級。無論是收發郵件的POP3/SMTP/IMAP、或是網頁傳送標準HTTP、檔案傳輸協定FTP、現代網路不可或缺的網域/位址轉換伺服器DNS，還是近年興起的BitTorrent P2P（peer to peer）傳輸協定，均屬於這層的管轄範圍。</p>
<p>這層直接對應用程式開放，提供不同程式同一類型的服務，譬如你可以使用你所喜歡的程式開啟網頁，也可以使用Outlook或Thunderbird收發郵件。各種不同的應用層協定，會為該協定提供的服務提供必要的處理機制。同時也因為服務眾多，在這層的協定數量為4層之冠，光是想看個網頁，就可能有3種協定參與其中，包含取得私有IP的DHCP、網域與位址轉換的DNS、以及取得網頁資料的HTTP。</p>
<h3 class="_4gd0">傳輸層（Transport Layer）</h3>
<p>資料經過了應用層之後，下一層便是傳輸層，此層對應用層傳送過來的資料進行處理，建立2台電腦之間可靠的傳輸。在此層常見的2種協定為TCP與UDP，絕大多數應用層協定都會選擇TCP，因為TCP提供一連串偵錯、重送、資料順序、流量控管等實作，確保2台電腦之間的連線正常，不會產生投桃報李的狀況。</p>
<p>相較於TCP提供連線的可靠性，UDP則專注於資料的傳遞，從TCP（傳輸控制協定、Transmission Control Protocol）與UDP（使用者資料電報協定：User Datagram Protocol）的名稱可看出端倪，UDP幾乎不管資料是否正確送達，需要應用層自行處理。</p>
<p>但別認為UDP就是項垃圾，像是DNS查詢、DHCP請求與配發都是使用UDP協定，另外像是部分影音串流服務，講求大量且迅速的資料傳遞，偶爾丟掉資料不會造成太大影響（因為最終觀賞或聆聽的終端是人，不易察覺畫面或聲音細微的缺陷）；即時通訊也是UDP的愛好者，因為人與人的溝通具時間性，上一句話漏掉的資訊，下一句話再傳來並沒有意義。除了上列2種常見的協定之外，前往中國旅遊出差，好用的翻牆方式PPTP，也住在這層喔。</p>
<h3>網路層（Transport Layer）</h3>
<p>前文中舉了許多郵寄的例子，此層就相當是郵件或包裹上方的地址欄位，無論你想要寄去世界上任何一角落，只要將地址寫好，郵件或包裹便會到達目的地。</p>
<p>網路層能夠提供實體介面網路卡1個邏輯上的位置，也就是我們常聽到的IP位址，此IP位址是唯一的（或至少在同層級的網路中是如此），所以資訊才能夠傳輸到正確的目的地。此層會將資料的目的地和來源地寫入，如同我們在信件上填入收件人和寄件者。</p>
<p>除了賦予每個網路介面卡邏輯IP位址外，IP還定義了資料封包該如何繞送的規則，如同郵局有各地區的小據點，也有大型的轉運站，藉由這些規則，選擇較佳的傳送路徑，將東西正確傳遞。</p>
<p>網路層的IP協定，事實上並非完全可靠，有可能在途中因為某些原因（封包緩衝區溢位、TTL為0……），整個資料完全不見。IP協定基本上是以「盡可能去做」為宗旨，有多少運算資源做多少事，超過負荷的資料並不提供其它方式修補，丟掉就是掉了。所以才需要傳輸層做這類確保工作。</p>
<h3>鏈結層（Link Level）</h3>
<p>位於整個網路架構的最底層，負責制定資料傳輸的「實體」規格。所謂「實體」，就是我們眼睛看的到，手可以摸到的部分。以乙太網路來說，凡是接頭規格、傳輸線材種類、不同電壓代表何種資訊，都是鏈結層負責的內容。</p>
<p>除了目前常見，採用RJ-45以及4對雙絞線的乙太網路之外，古老的乙太網路使用類似於電視同軸纜線的線材相互連結。以及目前大家比較常聽到的光纖、VDSL，也包含在其中。</p>
<p>鏈結層的運作也包含不同實體網路的轉接，像是從家中電腦的乙太網路轉換為對外的光纖環境，負責的光電轉換機就會先把乙太網路的標頭拿掉，加入為光纖制定的標頭，在光線上傳送。當光電轉換機從光纖上收到資料時，也會先把光纖標頭拿掉，加入乙太網路的標頭，再將資料送到電腦上。</p>
<h1>W10</h1>
<p></p>
<p>Public key 公開密鑰加密</p>
<p>Cryptography 編碼學</p>
<p>SSH 安全編碼機制</p>
<p>Putty:THE FREE SSH FOR WINDOW</p>
<p>設置:移動鼠標</p>
<p>Private key</p>

<h1>W12</h1>
<p></p>
<h1>W13</h1>
<h2>Blogger API</h2>
<p>基本概念:</p>
<p>1. 這裡所指的 Blogger API 為:<span> </span><a href="https://developers.google.com/blogger/docs/3.0/using">https://developers.google.com/blogger/docs/3.0/using</a></p>
<p>2. 將 CMSiMDE 中的 Pelican Blog 內容同步到 Google Blogger 的目的, 在讓網際內容管理系統中的網誌原始資料修改過程具備版次, 而且可同時將網誌出版在 Github Pages 與 Google Blogger 中, 讓網際內容的保存較具有永續性.</p>
<p>3. Google Blogger 中的網誌系統各有獨立 ID, 這裡稱為 blog_id, 而網誌中的每一篇文章各有獨立 ID, 這裡稱為 post_id.</p>
<p>4. Google Blogger 管理者登入後, 在 Settings - Permissions 項下, 允許 invite more authors, 而且在 Settings - Permissions - Blog admins and Authors 項下, 允許將所邀請共同寫作的 Author 提升為 Admin 管理者.</p>
<p>5. Google 的每一個 API 都允許使用者建立以 Oauth2 為基礎的登入使用授權憑證, 配合所啟動的各種 API 程式庫, 一旦啟用並登入後, 可以透過程式方法, 呼叫程式庫功能, 對各種 Google 所提供的服務 (Blogger, Drive, Gmail, Calendar 等) 新增內容. 以 Blogger 而言, 只要使用者被設為某一網誌的共同作者, 即擁有在該網誌新增或編輯自己所發布的網誌文章權限.</p>
<p>6. 使用者登入 Google 帳號後, 在<span> </span><a href="https://console.developers.google.com/">https://console.developers.google.com</a><span> </span>中所建立的 Oauth2 client ID, 可以下載存為 client_secrets.json 檔案.</p>
<p>7. client_secrets.json 檔案則可以透過下列程式, 轉換為 credential_token.dat, 使用者針對特定啟用的 API 程式庫, 可以在讀取 credential_token.dat 的情況下, 取得與登入 Gmail 帳號相同的使用授權, 直接在擁有權限的 blog_id 中新增特定的文章 (並以特定的 post_id 辨識).</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_479925">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py decorator">@language</code> <code class="py plain">python</code></div>
<div class="line number2 index1 alt1"><code class="py comments"># https://developers.google.com/blogger/docs/3.0/using</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># under Mac command + b to execute</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">pickle</code></div>
<div class="line number5 index4 alt2"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number6 index5 alt1"><code class="py keyword">from</code> <code class="py plain">googleapiclient.discovery </code><code class="py keyword">import</code> <code class="py plain">build</code></div>
<div class="line number7 index6 alt2"><code class="py keyword">from</code> <code class="py plain">google_auth_oauthlib.flow </code><code class="py keyword">import</code> <code class="py plain">InstalledAppFlow</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="py plain">SCOPES </code><code class="py keyword">=</code> <code class="py plain">[</code><code class="py string">'https://www.googleapis.com/auth/blogger'</code><code class="py plain">, ]</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py comments"># we check if the file tBo store the credentials exists</code></div>
<div class="line number13 index12 alt2"><code class="py keyword">if</code> <code class="py keyword">not</code> <code class="py plain">os.path.exists(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">):</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="py spaces">    </code><code class="py plain">flow </code><code class="py keyword">=</code> <code class="py plain">InstalledAppFlow.from_client_secrets_file(</code><code class="py string">'./../../yen_gm_blogger_secrets.json'</code><code class="py plain">, SCOPES)</code></div>
<div class="line number16 index15 alt1"><code class="py spaces">    </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">flow.run_local_server()</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">, </code><code class="py string">'wb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">        </code><code class="py plain">pickle.dump(credentials, credentials_dat)</code></div>
<div class="line number20 index19 alt1"><code class="py keyword">else</code><code class="py plain">:</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">, </code><code class="py string">'rb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">        </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">pickle.load(credentials_dat)</code></div>
<div class="line number23 index22 alt2"><code class="py plain">service </code><code class="py keyword">=</code> <code class="py plain">build(</code><code class="py string">'blogger'</code><code class="py plain">, </code><code class="py string">'v3'</code><code class="py plain">, credentials</code><code class="py keyword">=</code><code class="py plain">credentials)</code></div>
<div class="line number24 index23 alt1"><code class="py plain">g.es(service)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h1>W14</h1>
<h2>MacBook 操作指南</h2>
<h4>參考資料:</h4>
<p><a href="https://drive.google.com/open?id=1zIJkMnFNb0QYsBbzlxAvw8t7hZdZc0hh">Mac OS X for Absolute Beginners.pdf</a><span> </span>(for @gm users only)</p>
<p><a href="https://drive.google.com/open?id=1hl53RvI1sPFDuF63_TvjuuS-9y9ZQiO3">Learn C on the Mac.pdf</a><span> </span>(for @gm users only)</p>
<p>這裡以 MacBook Air 2012 年出廠, 硬體規格:</p>
<p>macOS Catalina Version 10.15.4</p>
<p>1.8 GHz Dual-Core Intel Core i5</p>
<p>Memory $GB 1600 MHz DDR3</p>
<p>Graphics Intel HD Graphics 4000 1536 MB</p>
<p>的操作為例, 如何存活在機械設計工程系與精密機械工程科的網際內容管理課程.</p>
<p>由於網際內容管理課程主要以 Ｗindows 10 64 位元操作系統中的 Python 3 可攜程式環境使用為主.</p>
<h4>從官方網站下載安裝 Python3</h4>
<p>因此 Catalina 系統中的首要任務, 便是安裝 Python 3:</p>
<p>在 2020.05.15 從<span> </span><a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a><span> </span>可以下載安裝最新的 Python 3.8.3 解譯環境.</p>
<h4>安裝 pip3</h4>
<p>有了 python 3 環境之後, 就可以從 Lanuchpad -&gt; Other -&gt; Terminal 開啟終端機, 並從 get-pip.py 下載用來安裝 pip3 的程式碼, 以終端機上的指令進行安裝:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_686207">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">sudo python3 get-pip.py</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>安裝 pip3 之後, 可以安裝 CMSiMDE 所需的 flask, flask_cors, lxml, bs4, markdown, pelican 以及 leo:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_63131">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">sudo pip3 install flask flask_cors lxml bs4 markdown pelican leo</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h4>安裝 XQuartz</h4>
<p>之後, 就可以安裝<span> </span><a href="https://www.xquartz.org/">XQuartz</a>, 以便使用 xterm 替代 terminal.</p>
<p>接下來假如要使用 SciTE 作為文字編輯器, 建議透過<span> </span><a href="https://www.macports.org/install.php">https://www.macports.org/install.php</a>  先根據 Catalina 操作系統版本安裝 Macports 之後, 再利用:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_545768">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">sudo port install scite</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>安裝 SciTE 文字編輯器.</p>
<p>至此, 再加上 Catalina 原有的 git 指令, 使用者已經可以在 MacBook 上執行與 Windows 10 64 位元操作系統上相同的:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_212193">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">git clone --recurse-submodules</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="js plain">git add .</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="js plain">git commit -m </code><code class="js string">"commit message"</code></div>
<div class="line number6 index5 alt1"> </div>
<div class="line number7 index6 alt2"><code class="js plain">git push</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="js plain">git pull</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="js plain">git submodule add</code></div>
<div class="line number12 index11 alt1"> </div>
<div class="line number13 index12 alt2"><code class="js plain">git remote add</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="js plain">git branch</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="js plain">git merge</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>等指令, 只是在執行 python 程式時, 必須使用:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_411639">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">python3 wsgi.py</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="js plain">pip3 install certain_module</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>否則直接使用 python 執行, 將會用 Python 2.7 環境執行而產生錯誤.</p>
<h4>其他建議安裝套件</h4>
<p>Microsoft Remote Desktop</p>
<p>Firefox</p>
<p>OBS</p>
<p>Visual Studio Code</p>
<p><a href="https://drive.google.com/open?id=1VeO6HfA3eq8kn5q9m2iJ8SdGCVwUhizo">Visual Studio Code Distilled.pdf</a><span> </span>(for @gm users only)</p>
<p>Flutter (Dart)</p>
<h4>其他提示</h4>
<p>Command + Shift + . (toggle hidden folders and files)</p>
</div>
</div>
</div>
</div>
</div>
</div>